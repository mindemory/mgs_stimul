%% Edits by Mrugank (01/29/2022)
% Suppressed VBL Sync Error by PTB, added sca, clear; close all;

%% Check the system name to ensure correct paths are added.
[ret, hostname] = system('hostname');   
if ret ~= 0
    hostname = getenv('HOSTNAME');
end
hostname = strtrim(hostname);

%% Load PTB and toolboxes
if strcmp(hostname, 'syndrome')
    % Location of PTB on Syndrome
    addpath(genpath('/Users/Shared/Psychtoolbox')) %% mrugank (01/28/2022): load PTB
elseif strcmp(hostname, 'tmsstim.cbi.fas.nyu.edu')
    % Location of toolboxes on TMS Stimul Mac
    addpath(genpath('/Users/curtislab/TMS_Priority/exp_materials/'))
    rmpath(genpath('/Users/curtislab/matlab/mgl'));
    addpath(genpath('/Users/curtislab/Documents/MATLAB/mgl2'));
end

% function recordPhosphene()
sca; clear; close all; clc;
global parameters;
global screen;
Screen('Preference','SkipSyncTests', 1) %% mrugank (01/29/2022): To suppress VBL Sync Error by PTB

% Eyelink('SeinitScreen()
tAddress','192.168.1.5') % for the scanner room
loadParameters()
%INITIALIZE EYE TRACKER & RUN CALIBRATION
%run without eye tracker if dummymode set to 1
if parameters.dummymode == 1
    % Provide Eyelink with details about the graphics environment
    % and perform some initializations. The information is returned
    % in a structure that also contains useful defaults
    % and control codes (e.g. tracker state bit and Eyelink key values).
    parameters.eyeTrackerOn = 1;
    el=EyelinkInitDefaults(screen.win);

    %Initialization of the connection with the Eyelink Gazetracker.
    %exit program if this fails.
    if ~EyelinkInit(parameters.dummymode, 1)
        fprintf('Eyelink Init aborted.\n');
        cleanup;  % cleanup function
        return;
    end


    [v vs]=Eyelink('GetTrackerVersion');
    fprintf('Running experiment on a ''%s'' tracker.\n', vs );

    % make sure that we get event data from the Eyelink
    Eyelink('command', 'file_event_filter = LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON');
    Eyelink('command', 'link_sample_data  = LEFT,RIGHT,GAZE,AREA');
    Eyelink('command', 'link_event_data = GAZE,GAZERES,HREF,AREA,VELOCITY');
    Eyelink('command', 'link_event_filter = LEFT,RIGHT,FIXATION,BLINK,SACCADE,BUTTON');

    % open file to record data to
    %edfFile= [resultsFile '.edf'];
    Eyelink('Openfile', parameters.edfFile);

    % Calibrate the eye tracker
    EyelinkDoTrackerSetup(el);

    %  do a final check of calibration using driftcorrection
    EyelinkDoDriftCorrection(el);

    WaitSecs(0.1);
%     Eyelink('StartRecording');

    eye_used = Eyelink('EyeAvailable'); % get eye that's tracked
    if eye_used == el.BINOCULAR; % if both eyes are tracked
       eye_used = el.LEFT_EYE; % use left eye
    end
end
